{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "trace_bits",
  "steps": [
    {
      "file": "afl-fuzz.c",
      "description": "新しいエッジがカバーされると、そのエッジに対応する virgin_bits のビットがクリアされます。\r\nこれにより、virgin_bits は徐々にクリアされていき、どのエッジがカバーされていないかを示すようになります。\r\n\r\n新しいテストケースがプログラムのこれまで実行されなかった部分を通過した場合、対応するトレースビットが新たに設定されます。\r\n具体的には、trace_bits内の特定のビットが「1」に設定されます。これにより、その経路が初めて実行されたことが記録されます。\r\n\r\n1. has_new_bits\r\n2. update_bitmap_score\r\n3. run_target\r\n4. calibrate_case\r\n5. setup_shm\r\n6. init_forkserver\r\n7. save_if_interesting\r\n8. trim_case\r\n9. fuzz_one\r\n\r\nEXEC_FAIL_SIGの代入(=)は、run_targetで2回、init_forkserverで2回。\r\n\r\n<pre>\r\n# grep -rin \"trace_bits\" afl-fuzz.c | grep \"=\"\r\n911:  u64* current = (u64*)trace_bits;\r\n918:  u32* current = (u32*)trace_bits;\r\n1397:  trace_bits = shmat(shm_id, NULL, 0);\r\n1399:  if (trace_bits == (void *)-1) PFATAL(\"shmat() failed\");\r\n2122:    *(u32*)trace_bits = EXEC_FAIL_SIG;\r\n2234:  if (*(u32*)trace_bits == EXEC_FAIL_SIG)\r\n2385:      *(u32*)trace_bits = EXEC_FAIL_SIG;\r\n2460:  tb4 = *(u32*)trace_bits;\r\n2634:    cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);\r\n2647:          if (!var_bytes[i] && first_trace[i] != trace_bits[i]) {\r\n2678:  q->bitmap_size = count_bytes(trace_bits);\r\n3198:    queue_top->exec_cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);\r\n4577:      cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);\r\n5221:      u32 cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);\r\n5377:        cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);\r\n</pre>\r\n\r\n値の照合\r\n2234:  if (*(u32*)trace_bits == EXEC_FAIL_SIG)\r\n\r\ninit_server:\r\n if (*(u32*)trace_bits == EXEC_FAIL_SIG)\r\n    FATAL(\"Unable to execute target application ('%s')\", argv[0]);\r\n\r\n\r\ntrace_bits は AFL の内部で使用されるデータ構造で、ファズテストの実行中に特定の入力がプログラムのどの部分を実行したかを追跡するためのものです。具体的には、以下のような役割を果たします：\r\n\r\n実行トレースの記録：\r\n\r\ntrace_bits は固定サイズのビットマップで、プログラムの各ブロックの実行頻度を記録します。\r\nプログラムの各基本ブロックが実行されるたびに、このビットマップの対応する位置が更新されます。\r\nカバレッジ測定：\r\n\r\nファズテストの目的は、新しいコードパスを発見することです。trace_bits は、どのコードパスが既に実行されたかを記録し、新しいコードパスが発見されたかどうかを判断するために使用されます。\r\n\r\n変更関数\r\n\r\nstatic inline void afl_maybe_log(uint32_t cur_loc) {\r\n  /* 'cur_loc' is the location of the current block, as passed from the\r\n     instrumentation code. */\r\n\r\n  uint32_t* ptr = &trace_bits[cur_loc ^ prev_loc];\r\n\r\n  /* Map the 'cur_loc' and 'prev_loc' to an index in 'trace_bits' and update\r\n     the counter at that index. */\r\n\r\n  (*ptr)++;\r\n\r\n  /* Update 'prev_loc' to the current location for the next instrumentation. */\r\n\r\n  prev_loc = cur_loc >> 1;\r\n}",
      "line": 151
    },
    {
      "file": "afl-fuzz.c",
      "description": "「top_rated」はAFLの一部の機能で、テストケースの優先順位をつける際に使用されます\r\n\r\nヒットカウント：特定のテストケースがどれだけ多くのユニークなコードパスを通過したかを追跡します。\r\nコードカバレッジ：新しいコードパスを発見したテストケースは高く評価されます。\r\nクラッシュ検出：クラッシュやバグを引き起こしたテストケースは特に注目され、優先度が上がります。",
      "line": 1277
    },
    {
      "file": "afl-fuzz.c",
      "description": "実行データは「カバレッジマップ」と呼ばれる変数で管理されます。カバレッジマップは、プログラムが特定の実行パスを通過したかどうかを追跡するために使用されます。",
      "line": 1397
    },
    {
      "file": "afl-fuzz.c",
      "description": "virgin_bitsの統計表示",
      "line": 3987
    },
    {
      "file": "afl-fuzz.c",
      "description": "trace_bitsはハッシュ値を計算して管理。\r\n\r\nhash32でハッシュを取る箇所。\r\n1. calibrate_case\r\n2. save_if_interesting\r\n3. trim_case\r\n4. fuzz_one\r\n5. fuzz_one\r\n",
      "line": 2634
    },
    {
      "file": "afl-fuzz.c",
      "description": "cksumがない場合は、初回実行",
      "line": 2658
    },
    {
      "file": "afl-fuzz.c",
      "description": "1. calibrate_case\r\n2. save_if_interesting\r\n3. trim_case\r\n4. fuzz_one\r\n5. fuzz_one",
      "line": 4577
    },
    {
      "file": "afl-fuzz.c",
      "description": "tracebitsは、has_new_bits内で参照（ポインタコピー）される。",
      "line": 911
    },
    {
      "file": "afl-fuzz.c",
      "description": "trace_bitsの変更開始",
      "line": 918
    },
    {
      "file": "afl-fuzz.c",
      "description": "trace_bits変更ポイント\r\n\r\nconfig.h\r\n/* Distinctive bitmap signature used to indicate failed execution: */\r\n#define EXEC_FAIL_SIG       0xfee1dead\r\n",
      "line": 2122
    },
    {
      "file": "afl-fuzz.c",
      "description": "trace_bits変更ポイント　その他はinit_forkserver",
      "line": 2385
    }
  ]
}
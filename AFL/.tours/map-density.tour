{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "map density",
  "steps": [
    {
      "file": "afl-fuzz.c",
      "description": "\"map density\"とは、テスト対象のプログラムの異なるパスや分岐をどれだけ網羅しているかを示す指標です。AFLは、異なる入力を使ってプログラムを繰り返し実行し、実行されたパスを記録します。そして、\"map density\"は、実行されたパスの網羅度合いを示します。\r\n\r\n\"Map density\"は通常、0から100の範囲で表され、100に近いほどプログラムの多くの部分が実行されたことを示します。AFLは、この指標を使用して、テストスイートを改善し、より高いカバレッジを達成するための効果的な入力を生成します。\r\n\r\n増加速度は共に減少しますが、map_densityの方がやや早く鈍化する可能性があります。これは、新しいカバレッジパスを見つけることよりも、既存のカバレッジパスを深く探索することが多くなるためです。\r\n\r\n新しい基本ブロックの発見:\r\nファズィングによって生成された入力が、新しい基本ブロック（関数やループなど、コード内の独立した命令群）に到達したときに増加します。\r\n\r\n新しい分岐の発見:\r\n新しい分岐や条件判定の通過が発見された場合にもmap_densityが増加します。例えば、if文やswitch文などの新しい経路が探索されたときです。\r\n\r\n新しい関数呼び出しの発見:\r\nファズィングによって新しい関数呼び出しがトリガーされた場合もmap_densityが増加します。\r\n\r\n3987 t_bytes = count_non_255_bytes(virgin_bits);\r\n3988 t_byte_ratio = ((double)t_bytes * 100) / MAP_SIZE;\r\n\r\n1038\r\n\r\n/* Count the number of non-255 bytes set in the bitmap. Used strictly for the\r\n   status screen, several calls per second or so. */\r\n\r\nstatic u32 count_non_255_bytes(u8* mem) {\r\n\r\nu32 map_density = count_non_zero_bits(trace_bits) * 100 / MAP_SIZE;",
      "line": 4165,
      "selection": {
        "start": {
          "line": 4166,
          "character": 27
        },
        "end": {
          "line": 4166,
          "character": 39
        }
      }
    }
  ]
}